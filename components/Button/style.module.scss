@use '@/styles/funcs.module';
@use '@/styles/consts.module';
@use '@/styles/colors.module' as c;
@use '@/styles/values.module' as v;

$all-transition: all 350ms ease-out;

.container {
  align-items: stretch;
  justify-content: center;
  flex-direction: row;
  border-color: var(--button-color);
  border-radius: v.$border-radius-1;
  background-color: funcs.set-alpha(var(--button-color), 10%);
  overflow: hidden;

  &:not(.noMin) {
    min-width: 75px;
    min-height: 25px;
  }

  border-width: 1px;
  border-style: solid;
  cursor: pointer;
  transition: $all-transition,
              filter 500ms consts.$ease-out-quartic;

  &:not(.disabled) {
    &:hover, &:focus-visible {
      background-color: funcs.set-alpha(var(--button-color), 20%);
    }
      
    &:active, &.active {
      background-color: var(--button-color);
      filter: drop-shadow(0 0 10px funcs.set-alpha(var(--button-color), 50%));

      span, .background svg {
        color: c.$primary;
        fill: c.$primary;
        stroke: c.$primary;
      }
    }
  }
}

.disabled {
  background-color: funcs.set-alpha(c.$secondary, 10%);
  border-color: c.$secondary;
  color: c.$quinary;
  cursor: not-allowed;
}

.icon {
  align-items: center;
  justify-content: center;
  padding: 5px;

  &:not(.background) {
    background-color: c.$primary;
  }

  svg {
    transition: $all-transition;
  }
}

.textHolder {
  flex: 1;
  align-items: center;
  justify-content: center;
  margin-left: 10px;
  margin-right: 10px;
  text-wrap: nowrap;

  > span {
    transition: $all-transition;
    user-select: none;
  }
}
