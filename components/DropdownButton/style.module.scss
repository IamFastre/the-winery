@use '@/styles/funcs.module';
@use '@/styles/consts.module';
@use '@/styles/colors.module' as c;
@use '@/styles/values.module' as v;

$o-height: 40px;

@mixin styling($small) {
  .container {
    user-select: none;
    width: 175px;

    &.noWith { width: unset; }

    @if ($small) { flex-direction: column-reverse; }
    @else { flex-direction: column; }
  }

  .head {
    cursor: pointer;
    height: calc($o-height + 10px);
    padding: 10px;
    gap: 10px;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    border: 1px solid c.$accent;
    border-radius: v.$border-radius-1;
    background-color: funcs.set-alpha(c.$accent, 10%);
    transition: all 500ms consts.$ease-out-quartic;

    &.open {
      background-color: funcs.set-alpha(c.$accent, 20%);
      @if ($small) {
        border-top-left-radius: 0;
        border-top-right-radius: 0;
      }
      @else {
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
      }
    }
  }

  .headContent {
    flex-direction: row;
    align-items: center;
    gap: 10px;

    > svg {
      $size: 25px;
      width: $size;
      height: $size;
    }
  }

  .subtitle {
    font-size: 12px;
    color: c.$secondary;
  }

  .caret {
    transition: all 500ms consts.$ease-out-quartic;

    @if ($small) { transform: scaleY(-1); }
    @else { transform: scaleY(1); }

    path {
      transition: all 500ms consts.$ease-out-quartic;
      fill: c.$accent;
      stroke: transparent;
      stroke-width: 0;
    }

    &.open {
      @if ($small) { rotate: -90deg; }
      @else { rotate: 90deg; }

      path {
        fill: transparent;
        stroke: c.$accent;
        stroke-width: 50px;
      }
    }
  }

  .options {
    $m: 4px;
    margin: 0 $m;
    height: 0;
    max-height: calc($o-height * 4);
    overflow-y: scroll;
    transition: all 500ms consts.$ease-out-quartic;
    background-color: funcs.set-alpha(c.$accent, 10%);

    @if ($small) {
      flex-direction: column-reverse;
      border-radius: 5px 5px 0 0;
    }
    @else {
      flex-direction: column;
      border-radius: 0 0 5px 5px;
    }

    &.open { height: auto; }

    &.floating {
      z-index: 1;
      position: absolute;
      width: calc(100% - $m * 2);
      top: calc($o-height + 10px);
    }
  }

  .option {
    min-height: $o-height;
    max-height: $o-height;
    transition: all 500ms consts.$ease-out-quartic;
    padding: 10px;
    flex-direction: row;
    justify-content: space-between;
    cursor: pointer;

    &.selected {
      background-color: funcs.set-alpha(c.$accent, 10%);

      &::after {
        content: "â€¢";
        color: c.$accent;
      }
    }
  }
}

@media screen and (min-width: 0px)
              and (max-width: 786px) {
  @include styling($small: true);
}

@media screen and (min-width: 787px) {
  @include styling($small: false);
}
